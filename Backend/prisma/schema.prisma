// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id        String    @id @default(cuid())
  name      String    @unique
  room_id   String    @unique
  updatedAt DateTime  @updatedAt
  users     User[]    @relation("RoomUsers")
  // isOnline  Boolean   @default(false)
  messages  Message[] @relation("RoomMessages")
}

model User {
  id        String    @id @default(cuid())
  user_name String    @unique
  // email     String   @unique
  image     String?
  updatedAt DateTime  @updatedAt
  rooms     Room?     @relation("RoomUsers", fields: [roomId], references: [room_id], onDelete: Cascade)
  roomId    String?
  isOnline  Boolean   @default(false)
  Message   Message[]
}

// model Message {
//   id        String   @id @default(cuid())
//   content   String
//   room      Room     @relation("RoomMessages", fields: [roomId], references: [room_id])
//   roomId    String
//   sender    User     @relation(fields: [senderId], references: [id])
//   senderId  String
//   createdAt DateTime @default(now())
// }

model Message {
  id        String   @id @default(cuid())
  content   String? // Make content optional since media-only messages are possible
  media     String?  // JSON string to store media URLs and metadata
  roomId    String
  senderId  String
  createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt
  room      Room     @relation("RoomMessages", fields: [roomId], references: [room_id])
  sender    User     @relation(fields: [senderId], references: [id])
}
